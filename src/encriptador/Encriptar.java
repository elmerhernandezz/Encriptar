/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package encriptador;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.MGF1ParameterSpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.EncryptedPrivateKeyInfo;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.OAEPParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.PSource;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;

/**
 *
 * @author carlos
 */
public class Encriptar extends javax.swing.JFrame {

    /**
     * Creates new form Encriptar
     */
    private String llave;
    private String pem;
    private String archivo;
    
    public Encriptar() {
        initComponents();
        this.llave="";
        this.pem="";
        this.archivo="";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 24)); // NOI18N
        jLabel1.setText("Encriptar información");

        jLabel2.setText("Llave Pub:");

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setText("Mensaje:");

        jButton2.setText("Exportar...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel4.setText("Resultado:");

        jButton3.setText("Desencriptar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Llave Pem:");

        jButton4.setText("...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane1)
                                            .addComponent(jTextField1)
                                            .addComponent(jScrollPane2)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jButton2)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4)))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Crear un JFileChooser
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
    
        // Mostrar el diálogo de apertura (puedes usar showOpenDialog o showSaveDialog)
        int result = fileChooser.showOpenDialog(this);

        if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
            // Obtener el archivo seleccionado
            java.io.File selectedFile = fileChooser.getSelectedFile();
            this.llave=selectedFile.getAbsolutePath();
            // Mostrar la ruta absoluta en el JTextField
            this.jTextField1.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try 
        {
            // 1) Verificar ruta de la llave pública en this.llave
            if (this.llave == null || this.llave.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ruta de la llave pública vacía (this.llave).",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            PublicKey llavePublica = cargarLlavePublica(this.llave);

            // 2) Obtener el texto a cifrar
            String textoPlano = this.jTextArea1.getText(); 
            byte[] datosCifrados = cifrarRsaOaepSha256(
                    textoPlano.getBytes(StandardCharsets.UTF_8), 
                    llavePublica);
            String datosBase64 = Base64.getEncoder().encodeToString(datosCifrados);
            this.jTextArea2.setText(datosBase64);

            // 3) Elegir archivo de salida con JFileChooser y guardar Base64
            JFileChooser selector = new JFileChooser();
            selector.setDialogTitle("Guardar archivo cifrado (Base64)");
            int resultado = selector.showSaveDialog(this);
            if (resultado == JFileChooser.APPROVE_OPTION) 
            {
                File archivoSalida = selector.getSelectedFile();
                Files.write(archivoSalida.toPath(), datosBase64.getBytes(StandardCharsets.UTF_8));
            }
        } catch (Exception e) 
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cifrar: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      try {
        // Seleccionar archivo cifrado
        JFileChooser selectorEntrada = new JFileChooser();
        selectorEntrada.setDialogTitle("Selecciona el archivo cifrado (.enc)");
        if (selectorEntrada.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
        File archivoCifrado = selectorEntrada.getSelectedFile();

        

        // Preguntar contraseña si aplica
        char[] contrasenia = pedirContrasenia("Contraseña de la llave privada (si aplica):");

        // Cargar llave privada
        PrivateKey llavePrivada = cargarLlavePrivadaDesdePem(this.pem, contrasenia);

        // Leer contenido cifrado en Base64 y descifrar
        String contenidoB64 = new String(Files.readAllBytes(archivoCifrado.toPath()), StandardCharsets.UTF_8).trim();
        byte[] datosCifrados = Base64.getMimeDecoder().decode(contenidoB64);
        byte[] datosPlanos = descifrarRsaOaepSha256(datosCifrados, llavePrivada);

        // Guardar archivo descifrado
        JFileChooser selectorSalida = new JFileChooser();
        selectorSalida.setDialogTitle("Guardar archivo descifrado");
        if (selectorSalida.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File archivoSalida = selectorSalida.getSelectedFile();
            Files.write(archivoSalida.toPath(), datosPlanos);
            JOptionPane.showMessageDialog(this,
                    "Archivo desencriptado guardado en:\n" + archivoSalida.getAbsolutePath(),
                    "OK", JOptionPane.INFORMATION_MESSAGE);
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al desencriptar: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Ruta de la llave privada
            JFileChooser selectorPem = new JFileChooser();
            selectorPem.setDialogTitle("Selecciona la llave privada (.pem)");
            if (selectorPem.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
            this.pem = selectorPem.getSelectedFile().getAbsolutePath();
            this.jTextField2.setText(this.pem);
        
    }//GEN-LAST:event_jButton4ActionPerformed

    
    
    private PublicKey cargarLlavePublica(String rutaPem) throws Exception 
    {
        String contenido = new String(Files.readAllBytes(new File(rutaPem).toPath()),
                StandardCharsets.US_ASCII);

        contenido = contenido.replaceAll("-----BEGIN PUBLIC KEY-----", "")
                                   .replaceAll("-----END PUBLIC KEY-----", "")
                                   .replaceAll("\\s", ""); // quita los saltos de línea

        byte[] der = Base64.getDecoder().decode(contenido);
        X509EncodedKeySpec especificacion = new X509EncodedKeySpec(der);
        KeyFactory fabrica = KeyFactory.getInstance("RSA");
        return fabrica.generatePublic(especificacion);
    }

    /** Cifra datos usando RSA OAEP con SHA-256 (compatible con OpenSSL). */
    private byte[] cifrarRsaOaepSha256(byte[] datos, PublicKey llavePublica) throws Exception 
    {
        Cipher cifrador = Cipher.getInstance("RSA/ECB/OAEPWithSHA-256AndMGF1Padding");
        OAEPParameterSpec oaep256 = new OAEPParameterSpec(
                "SHA-256",
                "MGF1",
                MGF1ParameterSpec.SHA256,
                PSource.PSpecified.DEFAULT
        );
        cifrador.init(Cipher.ENCRYPT_MODE, llavePublica, oaep256);
        return cifrador.doFinal(datos);
    }
    
    
    
    private char[] pedirContrasenia(String mensaje) {
    JPasswordField campo = new JPasswordField();
    int r = JOptionPane.showConfirmDialog(this, campo, mensaje, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
    return (r == JOptionPane.OK_OPTION) ? campo.getPassword() : new char[0];
}

/** Carga una llave privada RSA desde un archivo PEM PKCS#8 (cifrada o no). */
private PrivateKey cargarLlavePrivadaDesdePem(String rutaPem, char[] contrasenia) throws Exception {
    String pem = new String(Files.readAllBytes(new File(rutaPem).toPath()), StandardCharsets.US_ASCII).trim();
    if (pem.contains("BEGIN ENCRYPTED PRIVATE KEY")) {
        String base64 = pem.replace("-----BEGIN ENCRYPTED PRIVATE KEY-----", "")
                           .replace("-----END ENCRYPTED PRIVATE KEY-----", "")
                           .replaceAll("\\s", "");
        byte[] der = Base64.getDecoder().decode(base64);
        EncryptedPrivateKeyInfo epki = new EncryptedPrivateKeyInfo(der);
        try {
            return descifrarPkcs8(epki, contrasenia, "PBKDF2WithHmacSHA256");
        } catch (Exception e) {
            return descifrarPkcs8(epki, contrasenia, "PBKDF2WithHmacSHA1");
        }
    } else if (pem.contains("BEGIN PRIVATE KEY")) {
        String base64 = pem.replace("-----BEGIN PRIVATE KEY-----", "")
                           .replace("-----END PRIVATE KEY-----", "")
                           .replaceAll("\\s", "");
        byte[] der = Base64.getDecoder().decode(base64);
        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(der);
        return KeyFactory.getInstance("RSA").generatePrivate(spec);
    } else {
        throw new IllegalArgumentException("Formato de llave privada no reconocido.");
    }
}

/** Descifra un PKCS#8 EncryptedPrivateKeyInfo usando la KDF indicada. */
private PrivateKey descifrarPkcs8(EncryptedPrivateKeyInfo epki, char[] contrasenia, String algoritmoKdf) throws Exception {
    SecretKeyFactory fabrica = SecretKeyFactory.getInstance(algoritmoKdf);
    PBEKeySpec spec = new PBEKeySpec(contrasenia);
    SecretKey clave = fabrica.generateSecret(spec);
    Cipher cifrador = Cipher.getInstance(epki.getAlgName());
    cifrador.init(Cipher.DECRYPT_MODE, clave, epki.getAlgParameters());
    PKCS8EncodedKeySpec pkcs8 = epki.getKeySpec(cifrador);
    return KeyFactory.getInstance("RSA").generatePrivate(pkcs8);
}

/** Descifra datos con RSA OAEP-SHA256. */
private byte[] descifrarRsaOaepSha256(byte[] datos, PrivateKey llavePrivada) throws Exception {
    Cipher cifrador = Cipher.getInstance("RSA/ECB/OAEPWithSHA-256AndMGF1Padding");
    OAEPParameterSpec oaep256 = new OAEPParameterSpec(
            "SHA-256",
            "MGF1",
            MGF1ParameterSpec.SHA256,
            PSource.PSpecified.DEFAULT
    );
    cifrador.init(Cipher.DECRYPT_MODE, llavePrivada, oaep256);
    return cifrador.doFinal(datos);
}
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Encriptar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Encriptar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Encriptar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Encriptar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Encriptar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
